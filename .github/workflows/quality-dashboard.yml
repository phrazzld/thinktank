name: Quality Dashboard

# Deploy quality dashboard to GitHub Pages
# Triggers on successful CI runs and manual dispatch
on:
  workflow_run:
    workflows: ["Go CI", "Security Gates", "Performance Gates"]
    types: [completed]
    branches: [master]

  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy dashboard regardless of CI status'
        required: false
        default: false
        type: boolean

  # Allow manual trigger for testing
  push:
    paths:
      - 'docs/quality-dashboard/**'
      - 'scripts/quality/**'
      - '.github/workflows/quality-dashboard.yml'
    branches: [master]

  # Schedule daily updates at 6 AM UTC
  schedule:
    - cron: '0 6 * * *'

# Allow GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Generate dashboard data and deploy to GitHub Pages
  deploy-dashboard:
    name: Generate and Deploy Quality Dashboard
    runs-on: ubuntu-latest

    # Only run if triggering workflow succeeded or on manual dispatch
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch enough history for trend analysis
          fetch-depth: 100

      - name: Set up Node.js for GitHub CLI
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          # Install required tools for dashboard generation
          sudo apt-get update
          sudo apt-get install -y jq bc

          # Install GitHub CLI if not available
          if ! command -v gh &> /dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y gh
          fi

      - name: Validate dashboard generation script
        run: |
          echo "🔍 Validating dashboard generation script..."

          # Check if script exists and is executable
          if [[ ! -x "./scripts/quality/generate-dashboard.sh" ]]; then
            echo "❌ Dashboard generation script is missing or not executable"
            exit 1
          fi

          # Test script help functionality
          ./scripts/quality/generate-dashboard.sh --help

          echo "✅ Dashboard generation script validation passed"

      - name: Generate dashboard data
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "📊 Generating quality dashboard data..."

          # Set up environment
          export VERBOSE=true
          export OUTPUT_DIR=docs/quality-dashboard
          export MAX_RUNS=50

          # Run dashboard generation script
          ./scripts/quality/generate-dashboard.sh --verbose

          echo "✅ Dashboard data generation completed"

      - name: Validate generated data
        run: |
          echo "🔍 Validating generated dashboard data..."

          # Check if data file was generated
          if [[ ! -f "docs/quality-dashboard/dashboard-data.json" ]]; then
            echo "❌ Dashboard data file was not generated"
            exit 1
          fi

          # Validate JSON structure
          if ! jq empty docs/quality-dashboard/dashboard-data.json; then
            echo "❌ Generated dashboard data is not valid JSON"
            exit 1
          fi

          # Check for required fields
          required_fields=("generated_at" "repository" "summary" "latest_metrics" "trends" "quality_gates")
          for field in "${required_fields[@]}"; do
            if ! jq -e "has(\"$field\")" docs/quality-dashboard/dashboard-data.json >/dev/null; then
              echo "❌ Missing required field: $field"
              exit 1
            fi
          done

          # Display summary of generated data
          echo "📈 Dashboard data summary:"
          jq -r '.summary' docs/quality-dashboard/dashboard-data.json

          echo "✅ Dashboard data validation passed"

      - name: Create dashboard deployment package
        run: |
          echo "📦 Creating dashboard deployment package..."

          # Create a clean deployment directory
          mkdir -p dashboard-deployment

          # Copy dashboard files
          cp docs/quality-dashboard/index.html dashboard-deployment/
          cp docs/quality-dashboard/dashboard-data.json dashboard-deployment/

          # Create a simple 404 page
          cat > dashboard-deployment/404.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Page Not Found - ThinkTank Quality Dashboard</title>
            <meta http-equiv="refresh" content="0; url=./">
          </head>
          <body>
            <p>Redirecting to quality dashboard...</p>
          </body>
          </html>
          EOF

          # Create README for the deployment
          cat > dashboard-deployment/README.md << 'EOF'
          # ThinkTank Quality Dashboard

          This is the generated quality dashboard for the ThinkTank project.

          ## Files

          - `index.html` - Main dashboard page
          - `dashboard-data.json` - Quality metrics data
          - `404.html` - Fallback page

          ## Last Updated

          This dashboard was last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          ## Source

          Generated from: ${{ github.repository }}
          Commit: ${{ github.sha }}
          Workflow: ${{ github.workflow }}
          EOF

          echo "✅ Dashboard deployment package created"

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload dashboard to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dashboard-deployment

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Report deployment status
        run: |
          echo "🚀 Quality dashboard deployment completed!"
          echo ""
          echo "Dashboard URL: ${{ steps.deployment.outputs.page_url }}"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Generated at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "The dashboard is now accessible at the GitHub Pages URL above."

      - name: Create deployment summary
        run: |
          echo "# 📊 Quality Dashboard Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The ThinkTank quality dashboard has been successfully deployed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Dashboard Access" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Dashboard URL**: [${{ steps.deployment.outputs.page_url }}](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Data Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          jq '.summary' docs/quality-dashboard/dashboard-data.json >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔄 Update Schedule" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The dashboard is automatically updated:" >> $GITHUB_STEP_SUMMARY
          echo "- After successful CI workflow runs" >> $GITHUB_STEP_SUMMARY
          echo "- Daily at 6:00 AM UTC (scheduled)" >> $GITHUB_STEP_SUMMARY
          echo "- When dashboard-related files are updated" >> $GITHUB_STEP_SUMMARY
          echo "- Manually via workflow dispatch" >> $GITHUB_STEP_SUMMARY

  # Cleanup old workflow runs to prevent storage issues
  cleanup-old-runs:
    name: Cleanup Old Workflow Runs
    runs-on: ubuntu-latest
    needs: deploy-dashboard
    if: success()

    steps:
      - name: Delete old workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Keep only the last 10 successful runs for this workflow
            const runs = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: 'quality-dashboard.yml',
              status: 'completed',
              per_page: 100
            });

            // Sort by created_at date (newest first)
            const sortedRuns = runs.data.workflow_runs.sort((a, b) =>
              new Date(b.created_at) - new Date(a.created_at)
            );

            // Delete all but the most recent 10 runs
            const runsToDelete = sortedRuns.slice(10);

            for (const run of runsToDelete) {
              try {
                await github.rest.actions.deleteWorkflowRun({
                  owner,
                  repo,
                  run_id: run.id
                });
                console.log(`Deleted workflow run ${run.id} from ${run.created_at}`);
              } catch (error) {
                console.log(`Failed to delete workflow run ${run.id}: ${error.message}`);
              }
            }

            console.log(`Cleanup complete. Deleted ${runsToDelete.length} old workflow runs.`);
