name: Go CI

# Trigger events for the master branch and manual profiling
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      profile_tests:
        description: 'Run tests with profiling'
        required: false
        default: false
        type: boolean

# Allow issue creation for override tracking
permissions:
  contents: read
  issues: write
  pull-requests: write

# Quality Gate Hierarchy Implementation
# Stage 1: Foundation Gates (run in parallel)
#   - lint: Code quality checks (format, vet, golangci-lint)
#   - vulnerability-scan: Security vulnerability scanning
#   - Security gates in security-gates.yml: secret-scan, license-scan, sast-scan
# Stage 2: Testing Gates (depends on Stage 1 core gates)
#   - test: Unit, integration, and coverage tests
# Stage 3: Build Verification (depends on Stage 2)
#   - build: Binary compilation and artifact generation
# Special:
#   - profile: Manual profiling (depends on Stage 1)
jobs:
  # Check for emergency override labels
  check-override:
    name: Check Emergency Override
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      override_active: ${{ steps.override_check.outputs.override_active }}
      override_reason: ${{ steps.override_check.outputs.override_reason }}
      bypass_tests: ${{ steps.override_check.outputs.bypass_tests }}
      bypass_coverage: ${{ steps.override_check.outputs.bypass_coverage }}
    steps:
      - name: Check for emergency override labels
        id: override_check
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const labels = pullRequest.labels.map(label => label.name);
            console.log('PR Labels:', labels);

            // Check for override labels
            const overrideLabels = labels.filter(label =>
              label.includes('emergency-override') ||
              label.includes('bypass-tests') ||
              label.includes('bypass-coverage') ||
              label.includes('critical-hotfix')
            );

            const hasOverride = overrideLabels.length > 0;
            const bypassTests = labels.includes('bypass-tests') || labels.includes('emergency-override');
            const bypassCoverage = labels.includes('bypass-coverage') || labels.includes('emergency-override');

            if (hasOverride) {
              console.log('🚨 Emergency override detected:', overrideLabels);

              // Get override reason from PR body or comments
              const prBody = pullRequest.body || '';
              const overrideReason = prBody.includes('OVERRIDE REASON:')
                ? prBody.split('OVERRIDE REASON:')[1].split('\n')[0].trim()
                : 'Emergency override - see PR description for details';

              core.setOutput('override_active', 'true');
              core.setOutput('override_reason', overrideReason);
              core.setOutput('bypass_tests', bypassTests.toString());
              core.setOutput('bypass_coverage', bypassCoverage.toString());

              // Log the override for audit purposes
              console.log('Override Details:', {
                pr: context.issue.number,
                author: pullRequest.user.login,
                reason: overrideReason,
                bypassTests: bypassTests,
                bypassCoverage: bypassCoverage
              });
            } else {
              core.setOutput('override_active', 'false');
              core.setOutput('override_reason', '');
              core.setOutput('bypass_tests', 'false');
              core.setOutput('bypass_coverage', 'false');
            }

  # Read quality gate feature flags configuration
  read-config:
    name: Read Quality Gate Configuration
    runs-on: ubuntu-latest
    outputs:
      lint_enabled: ${{ steps.config.outputs.lint_enabled }}
      lint_required: ${{ steps.config.outputs.lint_required }}
      vulnerability_scan_enabled: ${{ steps.config.outputs.vulnerability_scan_enabled }}
      vulnerability_scan_required: ${{ steps.config.outputs.vulnerability_scan_required }}
      test_enabled: ${{ steps.config.outputs.test_enabled }}
      test_required: ${{ steps.config.outputs.test_required }}
      build_enabled: ${{ steps.config.outputs.build_enabled }}
      build_required: ${{ steps.config.outputs.build_required }}
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read quality gate configuration
        id: config
        uses: ./.github/actions/read-quality-gate-config

  # Stage 1: Foundation Gates - Code Quality
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    needs: [read-config]
    if: needs.read-config.outputs.lint_enabled == 'true'
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Go environment with comprehensive caching
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      # Cache Go build outputs for faster builds
      - name: Cache Go build cache
        id: go-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      # Log cache usage for monitoring
      - name: Cache status report
        run: |
          echo "Go module cache hit: ${{ steps.go-cache.outputs.cache-hit == 'true' && 'yes' || 'no' }}"

      # Verify dependencies integrity
      - name: Verify dependencies
        run: go mod verify

      # Check code formatting
      - name: Check formatting
        run: |
          set -eo pipefail
          if [ -n "$(go fmt ./...)" ]; then
            echo "Code is not formatted, run 'go fmt ./...'"
            exit 1
          fi

      # Run static analysis
      - name: Run vet
        run: go vet ./...

      # Run comprehensive linting
      - name: Install golangci-lint and run it directly
        run: |
          set -eo pipefail
          # Install golangci-lint v2.1.1 directly
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.1
          # Run golangci-lint directly without using the action to avoid --out-format flag issues
          $(go env GOPATH)/bin/golangci-lint run --timeout=5m

      # Install and run pre-commit checks
      - name: Install pre-commit
        run: |
          set -eo pipefail
          pip install pre-commit

      - name: Run pre-commit checks
        run: pre-commit run --all-files

      # Verify default model consistency
      - name: Check default model consistency
        run: ./scripts/ci/check-defaults.sh --verbose
        timeout-minutes: 1

  # Security vulnerability scanning job
  # Stage 1: Foundation Gates - runs in parallel with lint job
  # Scans for known vulnerabilities in Go dependencies using govulncheck
  vulnerability-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: [read-config]
    if: needs.read-config.outputs.vulnerability_scan_enabled == 'true'
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Go environment with comprehensive caching
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      # Cache Go build outputs for faster builds
      - name: Cache Go build cache
        id: go-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      # Log cache usage for monitoring
      - name: Cache status report
        run: |
          echo "Go module cache hit: ${{ steps.go-cache.outputs.cache-hit == 'true' && 'yes' || 'no' }}"

      # Install govulncheck with retry logic for network failures
      # Implements single retry on network failure with 2-second delay
      - name: Install govulncheck
        run: |
          set -eo pipefail
          echo "Installing govulncheck..."

          # Attempt installation with single retry on network failure
          RETRY_COUNT=0
          MAX_RETRIES=1

          while [ $RETRY_COUNT -le $MAX_RETRIES ]; do
            if go install golang.org/x/vuln/cmd/govulncheck@v1.0.4; then
              echo "✅ govulncheck installed successfully"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -le $MAX_RETRIES ]; then
                echo "⚠️  Installation failed, retrying (attempt $RETRY_COUNT of $MAX_RETRIES)..."
                sleep 2
              else
                echo "❌ CRITICAL: Failed to install govulncheck after $MAX_RETRIES retries"
                echo "This is likely a network or infrastructure issue"
                exit 1
              fi
            fi
          done

          # Verify installation
          if ! command -v govulncheck >/dev/null 2>&1; then
            echo "❌ CRITICAL: govulncheck not found in PATH after installation"
            exit 1
          fi

          echo "govulncheck version: $(govulncheck -version 2>/dev/null || echo 'version command not available')"
        timeout-minutes: 3

      # Execute vulnerability scan with dual reporting
      # Uses module-level scanning for comprehensive coverage
      # Generates both JSON (automation) and text (human-readable) reports
      - name: Run vulnerability scan
        run: |
          set -eo pipefail
          echo "Scanning for Go vulnerabilities..."

          # Initialize tracking variables
          JSON_EXIT_CODE=0
          TEXT_EXIT_CODE=0
          VULNERABILITIES_DETECTED=false

          # Generate JSON report (machine-readable for automation)
          echo "Generating JSON report..."
          if ! govulncheck -scan=module -json > vuln-report.json 2>&1; then
            JSON_EXIT_CODE=$?
          fi

          # Generate text report (human-readable for immediate review)
          echo "Generating text report..."
          if ! govulncheck -scan=module > vuln-report.txt 2>&1; then
            TEXT_EXIT_CODE=$?
          fi

          # Determine if we have actual vulnerabilities or a tool failure
          # Check if either command failed
          if [ $JSON_EXIT_CODE -ne 0 ] || [ $TEXT_EXIT_CODE -ne 0 ]; then
            # Check report contents to determine failure type
            # Check JSON report for vulnerability patterns
            if [ -s vuln-report.json ] && grep -q '"vulnerabilities":\s*\[' vuln-report.json && ! grep -q '"vulnerabilities":\s*\[\s*\]' vuln-report.json; then
              VULNERABILITIES_DETECTED=true
            fi

            # If JSON check didn't find vulnerabilities, check text report
            if [ "$VULNERABILITIES_DETECTED" = "false" ] && [ -s vuln-report.txt ] && grep -q "Vulnerability:" vuln-report.txt; then
              VULNERABILITIES_DETECTED=true
            fi
          fi

          # Provide appropriate feedback based on scan results
          if [ $JSON_EXIT_CODE -eq 0 ] && [ $TEXT_EXIT_CODE -eq 0 ]; then
            echo "✅ No known vulnerabilities found"
            echo "Scan completed successfully - codebase is secure"
          elif [ "$VULNERABILITIES_DETECTED" = "true" ]; then
            echo "❌ CRITICAL: Vulnerabilities found in dependencies"
            echo ""
            echo "Security scan failed - vulnerabilities detected that require immediate attention"
            echo ""
            echo "Text report summary:"
            echo "===================="
            cat vuln-report.txt
            echo ""
            echo "Full JSON report saved as artifact for detailed analysis"
            echo ""
            echo "Please review the vulnerability details above and update affected dependencies"
            exit 1
          else
            echo "❌ CRITICAL: Security scan failed due to tool error"
            echo ""
            echo "The govulncheck tool encountered an issue preventing successful scan execution."
            echo "This is likely due to:"
            echo "- Network connectivity issues fetching vulnerability database"
            echo "- Malformed go.mod or go.sum files"
            echo "- Internal govulncheck tool error"
            echo "- Insufficient permissions or resources"
            echo ""
            echo "Debug information:"
            echo "=================="
            echo "JSON scan exit code: $JSON_EXIT_CODE"
            echo "Text scan exit code: $TEXT_EXIT_CODE"
            echo ""
            if [ -s vuln-report.txt ]; then
              echo "Tool output (if any):"
              echo "---------------------"
              head -n 50 vuln-report.txt
            else
              echo "No text report generated"
            fi
            echo ""
            if [ -s vuln-report.json ]; then
              echo "JSON report size: $(wc -c < vuln-report.json) bytes"
            else
              echo "No JSON report generated"
            fi
            echo ""
            echo "Please investigate the tool failure before retrying."
            echo "Common fixes:"
            echo "- Verify go.mod and go.sum are valid"
            echo "- Check network connectivity"
            echo "- Ensure Go modules are properly initialized"
            exit 1
          fi
        timeout-minutes: 3

      # Upload vulnerability reports as artifacts for audit trail
      # Reports are preserved for 30 days regardless of scan result
      # Provides security team access for analysis and compliance
      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v4
        if: always()  # Upload reports even if scan fails
        with:
          name: vulnerability-reports
          path: |
            vuln-report.json
            vuln-report.txt
          retention-days: 30

  # Test job for running Go tests
  # Stage 2: Testing Gates - runs after all Stage 1 jobs complete
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [read-config, check-override, lint, vulnerability-scan]  # Depends on Stage 1 Foundation Gates
    if: always() && needs.read-config.outputs.test_enabled == 'true' && (needs.check-override.outputs.bypass_tests != 'true' || github.event_name == 'push')
    # Note: Security gates (secret-scan, license-scan, sast-scan) run independently in security-gates.yml
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Go environment with comprehensive caching
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      # Cache Go build outputs for faster builds
      - name: Cache Go build cache
        id: go-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      # Log cache usage for monitoring
      - name: Cache status report
        run: |
          echo "Go module cache hit: ${{ steps.go-cache.outputs.cache-hit == 'true' && 'yes' || 'no' }}"

      # Run integration tests with parallel execution
      - name: Run integration tests with parallel execution
        run: go test -v -race -short -parallel 4 ./internal/integration/...
        timeout-minutes: 5

      # Build Docker image for E2E test environment
      - name: Build E2E test Docker image
        run: |
          set -eo pipefail
          echo "Building E2E test Docker image..."
          docker build -f docker/e2e-test.Dockerfile -t thinktank-e2e:latest .

          # Verify image was built successfully
          docker images thinktank-e2e:latest
          echo "✅ E2E test Docker image built successfully"
        timeout-minutes: 5

      # Run E2E tests in containerized environment
      - name: Run E2E tests in Docker container
        run: |
          set -eo pipefail
          echo "Running E2E tests in containerized environment..."

          # Run E2E tests that require actual binary execution inside Docker container
          echo "Running E2E tests with binary execution in container..."
          docker run --rm \
            -e GEMINI_API_KEY=test-api-key \
            -e OPENAI_API_KEY=test-api-key \
            -e OPENROUTER_API_KEY=test-api-key \
            -e THINKTANK_DEBUG=true \
            thinktank-e2e:latest \
            go test -v -tags=manual_api_test ./internal/e2e/... -run TestAPIKeyError

          # Run additional E2E tests to verify binary functionality in container
          echo "Running comprehensive E2E test verification in container..."
          docker run --rm \
            -e GEMINI_API_KEY=test-api-key \
            -e OPENAI_API_KEY=test-api-key \
            -e OPENROUTER_API_KEY=test-api-key \
            -e THINKTANK_DEBUG=true \
            thinktank-e2e:latest \
            go test -v -tags=manual_api_test ./internal/e2e/... -run TestBasicExecution

          echo "✅ E2E tests completed successfully in containerized environment"
        timeout-minutes: 15

      # Run other tests with race detection
      - name: Run other tests with race detection
        run: go test -v -race -short $(go list ./... | grep -v "github.com/phrazzld/thinktank/internal/integration" | grep -v "github.com/phrazzld/thinktank/internal/e2e")
        timeout-minutes: 8

      # Verify secret detection tests are running and passing
      - name: Verify secret detection tests
        run: ./scripts/ci/verify-secret-tests.sh
        timeout-minutes: 2

      # Generate coverage report with short flag to skip long-running tests
      # Follows coverage measurement strategy defined in docs/COVERAGE_MEASUREMENT_STRATEGY.md
      - name: Generate coverage report
        run: |
          set -eo pipefail
          # Use the same coverage generation logic as our coverage scripts
          # Excludes test utility packages (testutil, mock files) to focus on business logic
          MODULE_PATH=$(grep -E '^module\s+' go.mod | awk '{print $2}')
          PACKAGES=$(go list ./... | grep -v "${MODULE_PATH}/internal/integration" | grep -v "${MODULE_PATH}/internal/e2e" | grep -v "/disabled/" | grep -v "${MODULE_PATH}/internal/testutil")
          go test -short -coverprofile=coverage.out.tmp -covermode=atomic $PACKAGES

          # Filter out test helper files from coverage data
          cat coverage.out.tmp | \
            grep -v "_test_helpers\.go:" | \
            grep -v "_test_utils\.go:" | \
            grep -v "mock_.*\.go:" | \
            grep -v "/mocks\.go:" > coverage.out

          # Cleanup temporary file
          rm coverage.out.tmp
        timeout-minutes: 5

      # Display coverage summary with per-package details
      - name: Display coverage summary
        run: |
          set -eo pipefail

          # Display overall coverage
          go tool cover -func=coverage.out

          echo ""
          # Display detailed per-package coverage with fail-fast enforcement
          echo "Checking per-package coverage thresholds..."
          ./scripts/check-package-coverage.sh 0
          # Coverage threshold restored to 90% target for quality gate enforcement

      # Upload coverage report as artifact
      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out
          retention-days: 14

      # Check coverage threshold (can be bypassed with override)
      # Uses strategy defined in docs/COVERAGE_MEASUREMENT_STRATEGY.md
      - name: Check overall coverage threshold
        if: github.event_name == 'push' || needs.check-override.outputs.bypass_coverage != 'true'
        run: |
          set -eo pipefail
          # Use dedicated script for checking coverage with 90% overall threshold
          # Excludes test utilities to focus on business logic coverage
          ./scripts/check-coverage.sh 90

      # Check package-specific coverage thresholds (can be bypassed with override)
      # Uses strategy defined in docs/COVERAGE_MEASUREMENT_STRATEGY.md
      - name: Check package-specific coverage thresholds
        if: github.event_name == 'push' || needs.check-override.outputs.bypass_coverage != 'true'
        run: |
          set -eo pipefail
          # This script enforces package-specific thresholds for critical packages
          # Excludes test utilities and focuses on business logic coverage
          ./scripts/ci/check-package-specific-coverage.sh

      # Report coverage bypass when override is active
      - name: Report coverage override
        if: github.event_name == 'pull_request' && needs.check-override.outputs.bypass_coverage == 'true'
        run: |
          echo "⚠️ WARNING: Coverage quality gates bypassed due to emergency override"
          echo "Reason: ${{ needs.check-override.outputs.override_reason }}"
          echo "A technical debt issue will be created to track this override"

  # Build job for building Go binary
  # Stage 3: Build Verification Gate - runs after Stage 2 Testing completes
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [read-config, test]  # Depends on Stage 2 Testing Gates
    if: always() && needs.read-config.outputs.build_enabled == 'true'
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Go environment with comprehensive caching
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      # Cache Go build outputs for faster builds
      - name: Cache Go build cache
        id: go-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      # Log cache usage for monitoring
      - name: Cache status report
        run: |
          echo "Go module cache hit: ${{ steps.go-cache.outputs.cache-hit == 'true' && 'yes' || 'no' }}"

      # Build the project
      - name: Build
        run: go build -v -ldflags="-s -w" -o thinktank
        timeout-minutes: 5

      # Upload binary as artifact
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: thinktank-binary
          path: thinktank
          retention-days: 7

  # Profiling job for analyzing test performance (runs on manual trigger)
  # Special job: Can run after Stage 1 completes when manually triggered
  profile:
    name: Profile Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.profile_tests == 'true'
    needs: [lint, vulnerability-scan]  # Depends on Stage 1 Foundation Gates
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Go environment with comprehensive caching
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      # Cache Go build outputs for faster builds
      - name: Cache Go build cache
        id: go-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      # Log cache usage for monitoring
      - name: Cache status report
        run: |
          echo "Go module cache hit: ${{ steps.go-cache.outputs.cache-hit == 'true' && 'yes' || 'no' }}"

      # Run all tests with CPU profiling
      - name: Run tests with CPU profiling
        run: go test -v -cpuprofile=cpu.prof ./...
        timeout-minutes: 10

      # Run all tests with memory profiling
      - name: Run tests with memory profiling
        run: go test -v -memprofile=mem.prof ./...
        timeout-minutes: 10

      # Run all tests with block profiling
      - name: Run tests with block profiling
        run: go test -v -blockprofile=block.prof ./...
        timeout-minutes: 10

      # Upload profiling data as artifact
      - name: Upload profiling data
        uses: actions/upload-artifact@v4
        with:
          name: test-profiles
          path: |
            *.prof
          retention-days: 7

  # Create technical debt issue when CI override is used
  create-ci-override-issue:
    name: Create CI Override Technical Debt Issue
    uses: ./.github/workflows/create-override-issue.yml
    needs: [check-override, test]
    if: always() && needs.check-override.outputs.override_active == 'true' && github.event_name == 'pull_request'
    with:
      pr_number: ${{ github.event.pull_request.number }}
      override_author: ${{ github.event.pull_request.user.login }}
      affected_gates: "Test Execution, Code Coverage (90% threshold), Package-specific Coverage"
      override_reason: ${{ needs.check-override.outputs.override_reason }}
      urgency_level: "P2"
