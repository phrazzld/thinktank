name: CI and Release

on:
  push:
    branches: [master]
    tags: ['v*']
  pull_request:
    branches: [master]

jobs:
  ci_checks:
    name: Lint, Test & Build Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5.0.2
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      # ======================================================================
      # COMMIT MESSAGE VALIDATION
      # ======================================================================
      # Uses Go-based validator to validate conventional commit format for commits
      # made after our baseline commit (May 18, 2025). This preserves all
      # historical git commits while ensuring future commits follow conventions.
      # ======================================================================
      - name: Commit Message Validation
        if: github.event_name == 'pull_request'
        run: |
          BASELINE_COMMIT="1300e4d675ac087783199f1e608409e6853e589f"
          echo "Using baseline commit: ${BASELINE_COMMIT}"

          COMMITS=$(git rev-list --no-merges "${BASELINE_COMMIT}..HEAD")
          if [ -z "${COMMITS}" ]; then
            echo "No commits to validate (all commits are at or before baseline)"
            exit 0
          fi

          echo "Commits to validate:"
          echo "${COMMITS}"

          for commit in $COMMITS; do
            if git merge-base --is-ancestor "${BASELINE_COMMIT}" "${commit}" && [ "${commit}" != "${BASELINE_COMMIT}" ]; then
              echo "Validating commit ${commit}"
              COMMIT_MSG=$(git show -s --format=%B "${commit}")
              if ! echo "${COMMIT_MSG}" | go run ./cmd/commitvalidate --stdin; then
                echo "❌ Commit ${commit} has invalid message format"
                exit 1
              fi
            else
              echo "⏭️  Skipping commit ${commit} (before baseline)"
            fi
          done
          echo "✅ All commits pass validation"

      - name: Verify dependencies
        run: go mod verify

      - name: Check formatting
        run: |
          if [ -n "$(go fmt ./...)" ]; then
            echo "::error::Code is not formatted, run 'go fmt ./...'"
            exit 1
          fi

      - name: Run vet
        run: go vet ./...

      - name: Install golangci-lint and run it directly
        run: |
          # Install golangci-lint v2.1.5 directly using go install
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.1.5
          # Run golangci-lint directly without using the action to avoid --out-format flag issues
          $(go env GOPATH)/bin/golangci-lint run --timeout=5m

      - name: Run tests
        run: go test -v -race ./...

      - name: Check coverage threshold
        run: |
          # Use gradual rollout for coverage thresholds
          # Current achievable: 49%, Target: 75%, Gradual rollout enabled
          export COVERAGE_GRADUAL_ROLLOUT=true
          export COVERAGE_THRESHOLD_CURRENT=49
          export COVERAGE_THRESHOLD_TARGET=75
          ./scripts/check-coverage.sh

      - name: Check package-specific coverage thresholds
        run: |
          # This script enforces package-specific thresholds for critical packages
          # Use same gradual rollout configuration
          export COVERAGE_GRADUAL_ROLLOUT=true
          export COVERAGE_THRESHOLD_CURRENT=49
          export COVERAGE_THRESHOLD_TARGET=75
          ./scripts/ci/check-package-specific-coverage.sh

      # Run vulnerability scan
      - name: Vulnerability scan
        uses: ./.github/actions/govulncheck-scan
        with:
          govulncheck-version: 'v1.1.4'

      # Run E2E tests as blocking CI step (T008 requirement)
      - name: End-to-End Tests
        run: |
          echo "Running E2E tests as required blocking CI step..."
          # Set test API key for E2E tests
          export OPENAI_API_KEY="test-api-key"
          export GEMINI_API_KEY="test-api-key"
          
          # Run E2E tests with timeout
          timeout 300 ./internal/e2e/run_e2e_tests.sh -v || {
            echo "❌ E2E tests failed or timed out"
            exit 1
          }
          echo "✅ E2E tests passed"

      - name: Build validation
        run: go build -v ./...

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: ci_checks
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || success()
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5.0.2
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      - name: Install svu
        run: go install github.com/caarlos0/svu/v3@v3.2.3

      - name: Calculate Version
        id: version
        run: |
          # For tag pushes, use the tag name (without v prefix)
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            echo "VERSION=${VERSION:1}" >> $GITHUB_ENV  # Remove 'v' prefix
            echo "IS_RELEASE=true" >> $GITHUB_ENV
          # For PR builds, create a snapshot version
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            VERSION="$(svu next)-pr-${{ github.event.pull_request.number }}-snapshot"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "IS_RELEASE=false" >> $GITHUB_ENV
          # For pushes to master, create a snapshot version
          else
            VERSION="$(svu next)-snapshot"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "IS_RELEASE=false" >> $GITHUB_ENV
          fi
          echo "Using version: $VERSION"

      - name: Install git-chglog
        run: go install github.com/git-chglog/git-chglog/cmd/git-chglog@v0.15.4

      - name: Generate Changelog
        run: |
          if [[ "$IS_RELEASE" == "true" ]]; then
            git-chglog -o CHANGELOG.md --next-tag v$VERSION v$VERSION
          else
            git-chglog -o CHANGELOG.md
          fi

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v5.0.0
        with:
          version: v1.26.2
          install-only: true

      - name: Run GoReleaser
        if: success()
        run: |
          if [[ "$IS_RELEASE" == "true" ]]; then
            # Full release for tags
            goreleaser release --release-notes=CHANGELOG.md --clean
          else
            # Snapshot release for PRs and master pushes
            goreleaser release --snapshot --skip-publish --skip-announce --skip-sign --release-notes=CHANGELOG.md --clean
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: thinktank-${{ env.VERSION }}
          path: dist/*
