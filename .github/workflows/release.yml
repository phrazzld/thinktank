---
name: CI and Release

'on':
  push:
    branches:
      - master
    tags:
      - 'v*'  # Matches tags like v1.0.0, v0.1.0-alpha
  pull_request:
    branches:
      - master

permissions:
  contents: write  # Required for goreleaser to create releases
  id-token: write  # Optional: for OIDC if needed later

jobs:
  ci_checks:
    name: Lint, Test & Build Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required to get full history for commit validation

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      - name: Install go-conventionalcommits
        run: |
          go install \
            github.com/leodido/go-conventionalcommits@v0.12.0

      - name: Validate Commit Messages
        run: |
          echo "Validating commit messages..."

          # For pull requests, validate all commits in the PR
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Checking commits in pull request..."
            # Get all commits in the PR
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            COMMITS=$(git rev-list ${BASE_SHA}..${HEAD_SHA})

          # For push events, validate commits in the push
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Checking commits in push..."
            # For tags, check commits since last tag
            if [[ "${{ github.ref }}" == refs/tags/* ]]; then
              # Get previous tag
              PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ \
                2>/dev/null || echo "")
              if [[ -n "$PREV_TAG" ]]; then
                COMMITS=$(git rev-list ${PREV_TAG}..HEAD)
              else
                # If no previous tag, check all commits
                COMMITS=$(git rev-list HEAD)
              fi
            else
              # For master pushes, check commits in the current push
              BEFORE="${{ github.event.before }}"
              AFTER="${{ github.event.after }}"
              COMMITS=$(git rev-list ${BEFORE}..${AFTER})
            fi
          fi

          # Validate each commit
          INVALID_COMMITS=()
          for commit in $COMMITS; do
            MSG=$(git log -1 --format=%s $commit)
            echo "Checking commit: $commit - $MSG"

            # Write commit message to temp file
            echo "$MSG" > commit_msg.txt

            # Validate the commit message
            if ! go-conventionalcommits validate --msg-file commit_msg.txt; then
              INVALID_COMMITS+=("$commit: $MSG")
            fi

            rm -f commit_msg.txt
          done

          # Report results
          if [ ${#INVALID_COMMITS[@]} -gt 0 ]; then
            echo "❌ Found ${#INVALID_COMMITS[@]} invalid commit message(s):"
            printf '%s\n' "${INVALID_COMMITS[@]}"
            echo ""
            echo "Commit messages must follow Conventional Commits."
            echo "See: https://www.conventionalcommits.org/"
            exit 1
          else
            echo "✅ All commit messages are valid"
          fi

      - name: Verify dependencies
        run: go mod verify

      - name: Check formatting
        run: |
          if [ -n "$(go fmt ./...)" ]; then
            echo "Code is not formatted, run 'go fmt ./...'"
            exit 1
          fi

      - name: Run vet
        run: go vet ./...

      - name: Install golangci-lint
        run: |
          INSTALLER_URL="https://raw.githubusercontent.com"
          INSTALLER_URL="${INSTALLER_URL}/golangci/golangci-lint"
          INSTALLER_URL="${INSTALLER_URL}/master/install.sh"
          curl -sSfL "$INSTALLER_URL" | \
            sh -s -- -b $(go env GOPATH)/bin v2.1.1
      - name: Run golangci-lint
        run: $(go env GOPATH)/bin/golangci-lint run --timeout=5m

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out \
            -covermode=atomic ./...

      # Check coverage threshold (currently 64%)
      - name: Check coverage threshold
        run: ./scripts/check-coverage.sh 64

      - name: Build validation
        run: go build -v ./...

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: ci_checks
    # Run on PRs, direct pushes to master, or v* tags
    if: |
      github.event_name == 'pull_request' ||
      (github.event_name == 'push' &&
       (github.ref == 'refs/heads/master' ||
        startsWith(github.ref, 'refs/tags/v')))
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for svu and git-chglog

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      - name: Install Release Tools
        run: |
          go install github.com/caarlos0/svu@latest
          go install github.com/git-chglog/git-chglog/cmd/git-chglog@latest
          go install github.com/goreleaser/goreleaser@latest

      - name: Determine Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, calculate next potential version
            VERSION=$(svu next)
            echo "Determined next version for PR: $VERSION"
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            # For master branch, calculate next potential version
            VERSION=$(svu next)
            echo "Determined next version for master: $VERSION"
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # For tag pushes, use the tag name as the version
            VERSION=${GITHUB_REF_NAME}
            echo "Using version from tag: $VERSION"
          else
            echo "::error::Unexpected ref: ${{ github.ref }}"
            exit 1
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          # Handle versions with or without 'v' prefix
          if [[ "${VERSION}" == v* ]]; then
            echo "RELEASE_TAG=${VERSION}" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_TAG=v${VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Generate Changelog
        run: |
          echo "Generating changelog for version \
            ${{ steps.version.outputs.RELEASE_TAG }}"
          git-chglog --next-tag \
            "${{ steps.version.outputs.RELEASE_TAG }}" \
            -o RELEASE_NOTES.md
          echo "Changelog generated as RELEASE_NOTES.md"
          echo "=== Changelog Preview ==="
          cat RELEASE_NOTES.md
          echo "======================="

      - name: Run Goreleaser (Snapshot for PR/master, Release for tags)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Running Goreleaser in snapshot mode for PR..."
            goreleaser release --snapshot --clean \
              --release-notes RELEASE_NOTES.md
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "Running Goreleaser in snapshot mode for master..."
            goreleaser release --snapshot --clean \
              --release-notes RELEASE_NOTES.md
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "Running Goreleaser for tag \
              ${{ steps.version.outputs.RELEASE_TAG }}..."
            # Goreleaser will use the current tag by default
            # --release-notes will populate the GitHub release body
            goreleaser release --clean \
              --release-notes RELEASE_NOTES.md
          fi
      - name: Upload Artifacts (snapshot only)
        if: |
          github.event_name == 'pull_request' ||
          github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v4
        with:
          name: thinktank-snapshot-${{ steps.version.outputs.VERSION }}
          path: dist/
          retention-days: 7
