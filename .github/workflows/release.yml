name: CI and Release

on:
  push:
    branches: [master]
    tags: ['v*']
  pull_request:
    branches: [master]

jobs:
  ci_checks:
    name: Lint, Test & Build Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true

      # ======================================================================
      # COMMIT MESSAGE VALIDATION WITH BASELINE EXCLUSION
      # ======================================================================
      # We only validate commits made AFTER our baseline commit when the conventional commit
      # standard was officially adopted. This approach:
      #
      # 1. Preserves historical git commits made before the standard was adopted
      # 2. Ensures all new development follows the conventional commits specification
      # 3. Prevents CI failures due to legacy/historical commit messages
      #
      # Baseline commit: 1300e4d675ac087783199f1e608409e6853e589f (May 18, 2025)
      - name: Validate Commit Messages (baseline-aware)
        if: github.event_name == 'pull_request'
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: .commitlintrc.yml
          helpURL: https://github.com/phrazzld/thinktank/blob/master/docs/conventional-commits.md
          failOnWarnings: false
          failOnErrors: true
        env:
          # Add a custom message that will appear in GitHub checks UI when validation fails
          GITHUB_FAILED_MESSAGE: |
            ❌ Some commit messages don't follow the Conventional Commits standard.

            Note: Only commits made AFTER May 18, 2025 (baseline: 1300e4d) are validated.

            Please fix any invalid commit messages. See docs/conventional-commits.md for:
            - Our baseline validation policy
            - Commit message format requirements
            - Instructions for fixing commit messages

      - name: Verify dependencies
        run: go mod verify

      - name: Check formatting
        run: |
          if [ -n "$(go fmt ./...)" ]; then
            echo "::error::Code is not formatted, run 'go fmt ./...'"
            exit 1
          fi

      - name: Run vet
        run: go vet ./...

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.56.2

      - name: Run golangci-lint
        run: golangci-lint run --timeout 5m

      - name: Run tests
        run: go test -v -race ./...

      - name: Check coverage threshold
        run: ./scripts/check-coverage.sh 90

      - name: Build validation
        run: go build -v ./...

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: ci_checks
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || success()
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true

      - name: Install svu
        run: go install github.com/caarlos0/svu@latest

      - name: Calculate Version
        id: version
        run: |
          # For tag pushes, use the tag name (without v prefix)
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            echo "VERSION=${VERSION:1}" >> $GITHUB_ENV  # Remove 'v' prefix
            echo "IS_RELEASE=true" >> $GITHUB_ENV
          # For PR builds, create a snapshot version
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            VERSION="$(svu next)-pr-${{ github.event.pull_request.number }}-snapshot"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "IS_RELEASE=false" >> $GITHUB_ENV
          # For pushes to master, create a snapshot version
          else
            VERSION="$(svu next)-snapshot"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "IS_RELEASE=false" >> $GITHUB_ENV
          fi
          echo "Using version: $VERSION"

      - name: Install git-chglog
        run: go install github.com/git-chglog/git-chglog/cmd/git-chglog@latest

      - name: Generate Changelog
        run: |
          if [[ "$IS_RELEASE" == "true" ]]; then
            git-chglog -o CHANGELOG.md --next-tag v$VERSION v$VERSION
          else
            git-chglog -o CHANGELOG.md
          fi

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          install-only: true

      - name: Run GoReleaser
        if: success()
        run: |
          if [[ "$IS_RELEASE" == "true" ]]; then
            # Full release for tags
            goreleaser release --release-notes=CHANGELOG.md --clean
          else
            # Snapshot release for PRs and master pushes
            goreleaser release --snapshot --skip=announce,publish --release-notes=CHANGELOG.md --clean
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: thinktank-${{ env.VERSION }}
          path: dist/*
