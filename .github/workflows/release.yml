name: CI and Release

on:
  push:
    branches: [master]
    tags: ['v*']
  pull_request:
    branches: [master]

jobs:
  ci_checks:
    name: Lint, Test & Build Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      # ======================================================================
      # FORWARD-ONLY COMMIT VALIDATION
      # ======================================================================
      # We use a forward-only approach to commit validation that:
      # 1. Preserves all historical git commits intact (no rebasing required)
      # 2. Only validates commits made AFTER a baseline is established
      # 3. Creates a baseline file on first run to mark validation start
      #
      # All future commits will need to follow conventional commit format
      # while all existing/historical commits are exempt from validation.
      # ======================================================================
      - name: Forward-Only Commit Validation
        if: github.event_name == 'pull_request'
        run: |
          echo "Running forward-only commit validation"
          echo "This approach preserves git history while ensuring future commits follow conventions"
          chmod +x ./scripts/ci/validate-baseline-commits.sh
          ./scripts/ci/validate-baseline-commits.sh

      - name: Verify dependencies
        run: go mod verify

      - name: Check formatting
        run: |
          if [ -n "$(go fmt ./...)" ]; then
            echo "::error::Code is not formatted, run 'go fmt ./...'"
            exit 1
          fi

      - name: Run vet
        run: go vet ./...

      - name: Install golangci-lint and run it directly
        run: |
          # Install golangci-lint v2.1.1 directly
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.1
          # Run golangci-lint directly without using the action to avoid --out-format flag issues
          $(go env GOPATH)/bin/golangci-lint run --timeout=5m

      - name: Run tests
        run: go test -v -race ./...

      - name: Check coverage threshold
        run: |
          # Use temporarily lowered threshold to match the CI workflow
          # TODO: Restore to 90% after test coverage is complete
          ./scripts/check-coverage.sh 64

      - name: Check package-specific coverage thresholds
        run: |
          # This script enforces package-specific thresholds for critical packages
          ./scripts/ci/check-package-specific-coverage.sh

      - name: Build validation
        run: go build -v ./...

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: ci_checks
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || success()
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      - name: Install svu
        run: go install github.com/caarlos0/svu/v3@v3.2.3

      - name: Calculate Version
        id: version
        run: |
          # For tag pushes, use the tag name (without v prefix)
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            echo "VERSION=${VERSION:1}" >> $GITHUB_ENV  # Remove 'v' prefix
            echo "IS_RELEASE=true" >> $GITHUB_ENV
          # For PR builds, create a snapshot version
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            VERSION="$(svu next)-pr-${{ github.event.pull_request.number }}-snapshot"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "IS_RELEASE=false" >> $GITHUB_ENV
          # For pushes to master, create a snapshot version
          else
            VERSION="$(svu next)-snapshot"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "IS_RELEASE=false" >> $GITHUB_ENV
          fi
          echo "Using version: $VERSION"

      - name: Install git-chglog
        run: go install github.com/git-chglog/git-chglog/cmd/git-chglog@v0.15.4

      - name: Generate Changelog
        run: |
          if [[ "$IS_RELEASE" == "true" ]]; then
            git-chglog -o CHANGELOG.md --next-tag v$VERSION v$VERSION
          else
            git-chglog -o CHANGELOG.md
          fi

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          install-only: true

      - name: Run GoReleaser
        if: success()
        run: |
          if [[ "$IS_RELEASE" == "true" ]]; then
            # Full release for tags
            goreleaser release --release-notes=CHANGELOG.md --clean
          else
            # Snapshot release for PRs and master pushes
            goreleaser release --snapshot --skip=announce,publish --release-notes=CHANGELOG.md --clean
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: thinktank-${{ env.VERSION }}
          path: dist/*
