name: Security Gates

# Trigger on push and pull requests to master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Allow issue creation for override tracking
permissions:
  contents: read
  issues: write
  pull-requests: write

# Security scanning jobs - part of Stage 1 Foundation Gates
jobs:
  # Check for emergency override labels
  check-override:
    name: Check Emergency Override
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      override_active: ${{ steps.override_check.outputs.override_active }}
      override_reason: ${{ steps.override_check.outputs.override_reason }}
      bypass_security: ${{ steps.override_check.outputs.bypass_security }}
    steps:
      - name: Check for emergency override labels
        id: override_check
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const labels = pullRequest.labels.map(label => label.name);
            console.log('PR Labels:', labels);

            // Check for override labels
            const overrideLabels = labels.filter(label =>
              label.includes('emergency-override') ||
              label.includes('security-override') ||
              label.includes('bypass-security')
            );

            const hasOverride = overrideLabels.length > 0;
            const bypassSecurity = labels.includes('bypass-security') || labels.includes('emergency-override');

            if (hasOverride) {
              console.log('üö® Emergency override detected:', overrideLabels);

              // Get override reason from PR body or comments
              const prBody = pullRequest.body || '';
              const overrideReason = prBody.includes('OVERRIDE REASON:')
                ? prBody.split('OVERRIDE REASON:')[1].split('\n')[0].trim()
                : 'Emergency override - see PR description for details';

              core.setOutput('override_active', 'true');
              core.setOutput('override_reason', overrideReason);
              core.setOutput('bypass_security', bypassSecurity.toString());

              // Log the override for audit purposes
              console.log('Override Details:', {
                pr: context.issue.number,
                author: pullRequest.user.login,
                reason: overrideReason,
                bypassSecurity: bypassSecurity
              });
            } else {
              core.setOutput('override_active', 'false');
              core.setOutput('override_reason', '');
              core.setOutput('bypass_security', 'false');
            }

  # Read quality gate feature flags configuration
  read-config:
    name: Read Quality Gate Configuration
    runs-on: ubuntu-latest
    outputs:
      secret_scan_enabled: ${{ steps.config.outputs.secret_scan_enabled }}
      secret_scan_required: ${{ steps.config.outputs.secret_scan_required }}
      license_scan_enabled: ${{ steps.config.outputs.license_scan_enabled }}
      license_scan_required: ${{ steps.config.outputs.license_scan_required }}
      sast_scan_enabled: ${{ steps.config.outputs.sast_scan_enabled }}
      sast_scan_required: ${{ steps.config.outputs.sast_scan_required }}
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read quality gate configuration
        id: config
        uses: ./.github/actions/read-quality-gate-config

  # Secret scanning with TruffleHog
  secret-scan:
    name: Secret Detection Scan
    runs-on: ubuntu-latest
    needs: [read-config, check-override]
    if: always() && needs.read-config.outputs.secret_scan_enabled == 'true' && (needs.check-override.outputs.bypass_security != 'true' || github.event_name == 'push')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scanning

      - name: Run TruffleHog secret detection
        uses: trufflesecurity/trufflehog@main
        with:
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified

      - name: Report scan completion
        if: success()
        run: |
          echo "‚úÖ Secret detection scan completed successfully"
          echo "No verified secrets found in the codebase"

      - name: Report scan failure
        if: failure()
        run: |
          echo "‚ùå CRITICAL: Secrets detected in codebase"
          echo "Please remove any hardcoded secrets and use environment variables or secret management instead"
          exit 1

  # License compliance checking
  license-scan:
    name: Dependency License Compliance
    runs-on: ubuntu-latest
    needs: [read-config, check-override]
    if: always() && needs.read-config.outputs.license_scan_enabled == 'true' && (needs.check-override.outputs.bypass_security != 'true' || github.event_name == 'push')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      - name: Install go-licenses
        run: go install github.com/google/go-licenses@v1.6.0

      - name: Check license compliance
        run: |
          set -eo pipefail
          echo "Checking dependency license compliance..."

          # Define allowed licenses (permissive licenses commonly used in Go ecosystem)
          ALLOWED_LICENSES=(
            "Apache-2.0"
            "BSD-2-Clause"
            "BSD-3-Clause"
            "MIT"
            "ISC"
            "Unlicense"
          )

          # Get all licenses and check against allowlist
          go-licenses csv . > licenses.csv

          # Check each license
          while IFS=, read -r package license_url license_type; do
            if [ -n "$license_type" ] && [ "$license_type" != "license" ]; then
              allowed=false
              for allowed_license in "${ALLOWED_LICENSES[@]}"; do
                if [ "$license_type" = "$allowed_license" ]; then
                  allowed=true
                  break
                fi
              done

              if [ "$allowed" = false ]; then
                echo "‚ùå FORBIDDEN LICENSE: $package uses $license_type"
                echo "Only the following licenses are allowed: ${ALLOWED_LICENSES[*]}"
                exit 1
              else
                echo "‚úÖ $package: $license_type (allowed)"
              fi
            fi
          done < licenses.csv

          echo "‚úÖ All dependency licenses are compliant"

      - name: Upload license report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report
          path: licenses.csv
          retention-days: 30

  # SAST scanning with gosec
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    needs: [read-config, check-override]
    if: always() && needs.read-config.outputs.sast_scan_enabled == 'true' && (needs.check-override.outputs.bypass_security != 'true' || github.event_name == 'push')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@v2.20.0

      - name: Run gosec security scan
        run: |
          set -eo pipefail
          echo "Running SAST security analysis..."

          # Run gosec with JSON output for detailed reporting
          gosec -fmt json -out gosec-report.json -severity medium ./...

          # Run gosec with text output for immediate feedback
          gosec -severity medium ./...

          echo "‚úÖ SAST scan completed successfully"

      - name: Upload SAST report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-report
          path: gosec-report.json
          retention-days: 30

      - name: Report SAST failure
        if: failure()
        run: |
          echo "‚ùå CRITICAL: Security vulnerabilities detected by SAST scan"
          echo "Please review and fix all medium+ severity security issues"
          echo "See gosec-report.json artifact for detailed findings"
          exit 1

  # Create technical debt issue when override is used
  create-override-issue:
    name: Create Override Technical Debt Issue
    uses: ./.github/workflows/create-override-issue.yml
    needs: [check-override, secret-scan, license-scan, sast-scan]
    if: always() && needs.check-override.outputs.override_active == 'true' && github.event_name == 'pull_request'
    with:
      pr_number: ${{ github.event.pull_request.number }}
      override_author: ${{ github.event.pull_request.user.login }}
      affected_gates: "Security Scan (TruffleHog), License Compliance, SAST Analysis"
      override_reason: ${{ needs.check-override.outputs.override_reason }}
      urgency_level: "P1"
