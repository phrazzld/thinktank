name: 'Read Quality Gate Configuration'
description: 'Reads the quality gates feature flag configuration and outputs gate settings'

inputs:
  config_path:
    description: 'Path to the quality gates configuration file'
    required: false
    default: '.github/quality-gates-config.yml'

outputs:
  # CI Gates
  lint_enabled:
    description: 'Whether lint gate is enabled'
    value: ${{ steps.read_config.outputs.lint_enabled }}
  lint_required:
    description: 'Whether lint gate is required'
    value: ${{ steps.read_config.outputs.lint_required }}

  vulnerability_scan_enabled:
    description: 'Whether vulnerability scan gate is enabled'
    value: ${{ steps.read_config.outputs.vulnerability_scan_enabled }}
  vulnerability_scan_required:
    description: 'Whether vulnerability scan gate is required'
    value: ${{ steps.read_config.outputs.vulnerability_scan_required }}

  test_enabled:
    description: 'Whether test gate is enabled'
    value: ${{ steps.read_config.outputs.test_enabled }}
  test_required:
    description: 'Whether test gate is required'
    value: ${{ steps.read_config.outputs.test_required }}

  build_enabled:
    description: 'Whether build gate is enabled'
    value: ${{ steps.read_config.outputs.build_enabled }}
  build_required:
    description: 'Whether build gate is required'
    value: ${{ steps.read_config.outputs.build_required }}

  # Security Gates
  secret_scan_enabled:
    description: 'Whether secret scan gate is enabled'
    value: ${{ steps.read_config.outputs.secret_scan_enabled }}
  secret_scan_required:
    description: 'Whether secret scan gate is required'
    value: ${{ steps.read_config.outputs.secret_scan_required }}

  license_scan_enabled:
    description: 'Whether license scan gate is enabled'
    value: ${{ steps.read_config.outputs.license_scan_enabled }}
  license_scan_required:
    description: 'Whether license scan gate is required'
    value: ${{ steps.read_config.outputs.license_scan_required }}

  sast_scan_enabled:
    description: 'Whether SAST scan gate is enabled'
    value: ${{ steps.read_config.outputs.sast_scan_enabled }}
  sast_scan_required:
    description: 'Whether SAST scan gate is required'
    value: ${{ steps.read_config.outputs.sast_scan_required }}

  # Additional Gates
  quality_dashboard_enabled:
    description: 'Whether quality dashboard gate is enabled'
    value: ${{ steps.read_config.outputs.quality_dashboard_enabled }}
  quality_dashboard_required:
    description: 'Whether quality dashboard gate is required'
    value: ${{ steps.read_config.outputs.quality_dashboard_required }}

  dependency_updates_enabled:
    description: 'Whether dependency updates gate is enabled'
    value: ${{ steps.read_config.outputs.dependency_updates_enabled }}
  dependency_updates_required:
    description: 'Whether dependency updates gate is required'
    value: ${{ steps.read_config.outputs.dependency_updates_required }}

  # Override Settings
  allow_emergency_override:
    description: 'Whether emergency override can bypass feature flags'
    value: ${{ steps.read_config.outputs.allow_emergency_override }}
  track_disabled_gates:
    description: 'Whether to track disabled gates as technical debt'
    value: ${{ steps.read_config.outputs.track_disabled_gates }}

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Read quality gate configuration
      id: read_config
      shell: bash
      run: |
        CONFIG_FILE="${{ inputs.config_path }}"

        # Function to extract YAML values safely
        get_yaml_value() {
          local key="$1"
          local file="$2"
          local default="${3:-false}"

          # Use yq if available, otherwise fallback to grep/sed
          if command -v yq >/dev/null 2>&1; then
            value=$(yq eval "$key" "$file" 2>/dev/null || echo "$default")
          else
            # Simple grep-based parser for basic YAML
            value=$(grep -A 10 "$key" "$file" | grep -E "^\s*(enabled|required):" | head -1 | sed 's/.*: *//' | tr -d ' ' || echo "$default")
          fi

          # Normalize boolean values
          case "$value" in
            true|True|TRUE|yes|Yes|YES|1) echo "true" ;;
            false|False|FALSE|no|No|NO|0) echo "false" ;;
            *) echo "$default" ;;
          esac
        }

        # Check if config file exists
        if [[ ! -f "$CONFIG_FILE" ]]; then
          echo "Warning: Quality gate config file not found at $CONFIG_FILE, using defaults"
          # Set all to enabled and required as safe defaults
          echo "lint_enabled=true" >> $GITHUB_OUTPUT
          echo "lint_required=true" >> $GITHUB_OUTPUT
          echo "vulnerability_scan_enabled=true" >> $GITHUB_OUTPUT
          echo "vulnerability_scan_required=true" >> $GITHUB_OUTPUT
          echo "test_enabled=true" >> $GITHUB_OUTPUT
          echo "test_required=true" >> $GITHUB_OUTPUT
          echo "build_enabled=true" >> $GITHUB_OUTPUT
          echo "build_required=true" >> $GITHUB_OUTPUT
          echo "secret_scan_enabled=true" >> $GITHUB_OUTPUT
          echo "secret_scan_required=true" >> $GITHUB_OUTPUT
          echo "license_scan_enabled=true" >> $GITHUB_OUTPUT
          echo "license_scan_required=true" >> $GITHUB_OUTPUT
          echo "sast_scan_enabled=true" >> $GITHUB_OUTPUT
          echo "sast_scan_required=true" >> $GITHUB_OUTPUT
          echo "quality_dashboard_enabled=true" >> $GITHUB_OUTPUT
          echo "quality_dashboard_required=false" >> $GITHUB_OUTPUT
          echo "dependency_updates_enabled=true" >> $GITHUB_OUTPUT
          echo "dependency_updates_required=false" >> $GITHUB_OUTPUT
          echo "allow_emergency_override=true" >> $GITHUB_OUTPUT
          echo "track_disabled_gates=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "Reading quality gate configuration from $CONFIG_FILE"
        cat "$CONFIG_FILE"

        # Install yq for YAML parsing if not available
        if ! command -v yq >/dev/null 2>&1; then
          echo "Installing yq for YAML parsing..."
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
        fi

        # Read CI gates
        echo "lint_enabled=$(get_yaml_value '.ci_gates.lint.enabled' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT
        echo "lint_required=$(get_yaml_value '.ci_gates.lint.required' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT

        echo "vulnerability_scan_enabled=$(get_yaml_value '.ci_gates.vulnerability_scan.enabled' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT
        echo "vulnerability_scan_required=$(get_yaml_value '.ci_gates.vulnerability_scan.required' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT

        echo "test_enabled=$(get_yaml_value '.ci_gates.test.enabled' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT
        echo "test_required=$(get_yaml_value '.ci_gates.test.required' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT

        echo "build_enabled=$(get_yaml_value '.ci_gates.build.enabled' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT
        echo "build_required=$(get_yaml_value '.ci_gates.build.required' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT

        # Read Security gates
        echo "secret_scan_enabled=$(get_yaml_value '.security_gates.secret_scan.enabled' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT
        echo "secret_scan_required=$(get_yaml_value '.security_gates.secret_scan.required' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT

        echo "license_scan_enabled=$(get_yaml_value '.security_gates.license_scan.enabled' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT
        echo "license_scan_required=$(get_yaml_value '.security_gates.license_scan.required' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT

        echo "sast_scan_enabled=$(get_yaml_value '.security_gates.sast_scan.enabled' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT
        echo "sast_scan_required=$(get_yaml_value '.security_gates.sast_scan.required' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT

        # Read Additional gates
        echo "quality_dashboard_enabled=$(get_yaml_value '.additional_gates.quality_dashboard.enabled' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT
        echo "quality_dashboard_required=$(get_yaml_value '.additional_gates.quality_dashboard.required' "$CONFIG_FILE" 'false')" >> $GITHUB_OUTPUT

        echo "dependency_updates_enabled=$(get_yaml_value '.additional_gates.dependency_updates.enabled' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT
        echo "dependency_updates_required=$(get_yaml_value '.additional_gates.dependency_updates.required' "$CONFIG_FILE" 'false')" >> $GITHUB_OUTPUT

        # Read Override settings
        echo "allow_emergency_override=$(get_yaml_value '.override_settings.allow_emergency_override' "$CONFIG_FILE" 'true')" >> $GITHUB_OUTPUT
        echo "track_disabled_gates=$(get_yaml_value '.override_settings.track_disabled_gates' "$CONFIG_FILE" 'false')" >> $GITHUB_OUTPUT

        echo "âœ… Quality gate configuration loaded successfully"
